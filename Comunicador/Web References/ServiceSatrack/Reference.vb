'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace ServiceSatrack
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="getEventsSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class getEvents
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private retrieveEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsV3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventStringV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventStringV3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDV3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDV4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDV5OperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsByIDV6OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLastEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLastEventWithImeiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLastEventStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsInOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private retrieveEventsInOutStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItineraryDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SNAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RKHOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVirtualPointByUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVirtualPointEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setMDTMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SIR_InformePosicionesGeograficasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKilometerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKilometerStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKilometerCurrentDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKilometerCurrentDateStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRegionesByUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRegionesByUserStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVehiclesByRegionesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVehiclesByRegionesStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerPointByUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerPointByUserStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CrearRegionDinamicasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ServicioComunicadorTGN.My.MySettings.Default.ServicioComunicadorTGN_ServiceSatrack_getEvents
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event retrieveEventsCompleted As retrieveEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsV2Completed As retrieveEventsV2CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsV3Completed As retrieveEventsV3CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventStringCompleted As retrieveEventStringCompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventStringV2Completed As retrieveEventStringV2CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventStringV3Completed As retrieveEventStringV3CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDCompleted As retrieveEventsByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDV2Completed As retrieveEventsByIDV2CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDV3Completed As retrieveEventsByIDV3CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDV4Completed As retrieveEventsByIDV4CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDV5Completed As retrieveEventsByIDV5CompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsByIDV6Completed As retrieveEventsByIDV6CompletedEventHandler
        
        '''<remarks/>
        Public Event getLastEventCompleted As getLastEventCompletedEventHandler
        
        '''<remarks/>
        Public Event getLastEventWithImeiCompleted As getLastEventWithImeiCompletedEventHandler
        
        '''<remarks/>
        Public Event getLastEventStringCompleted As getLastEventStringCompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsInOutCompleted As retrieveEventsInOutCompletedEventHandler
        
        '''<remarks/>
        Public Event retrieveEventsInOutStringCompleted As retrieveEventsInOutStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getItineraryDataCompleted As getItineraryDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SNACompleted As SNACompletedEventHandler
        
        '''<remarks/>
        Public Event RKHCompleted As RKHCompletedEventHandler
        
        '''<remarks/>
        Public Event getVirtualPointByUserCompleted As getVirtualPointByUserCompletedEventHandler
        
        '''<remarks/>
        Public Event getVirtualPointEventsCompleted As getVirtualPointEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event setMDTMessageCompleted As setMDTMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SIR_InformePosicionesGeograficasCompleted As SIR_InformePosicionesGeograficasCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKilometerCompleted As GetKilometerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKilometerStringCompleted As GetKilometerStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKilometerCurrentDateCompleted As GetKilometerCurrentDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKilometerCurrentDateStringCompleted As GetKilometerCurrentDateStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRegionesByUserCompleted As GetRegionesByUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRegionesByUserStringCompleted As GetRegionesByUserStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVehiclesByRegionesCompleted As GetVehiclesByRegionesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVehiclesByRegionesStringCompleted As GetVehiclesByRegionesStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerPointByUserCompleted As GetCustomerPointByUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerPointByUserStringCompleted As GetCustomerPointByUserStringCompletedEventHandler
        
        '''<remarks/>
        Public Event CrearRegionDinamicasCompleted As CrearRegionDinamicasCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmsCompleted As GetAlarmsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEvents", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEvents( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEvents", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventsAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventsOperationCompleted Is Nothing) Then
                Me.retrieveEventsOperationCompleted = AddressOf Me.OnretrieveEventsOperationCompleted
            End If
            Me.InvokeAsync("retrieveEvents", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsCompleted(Me, New retrieveEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsV2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsV2( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsV2", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsV2Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventsV2Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsV2Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventsV2OperationCompleted Is Nothing) Then
                Me.retrieveEventsV2OperationCompleted = AddressOf Me.OnretrieveEventsV2OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsV2", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventsV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsV2Completed(Me, New retrieveEventsV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsV3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsV3( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsV3", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsV3Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventsV3Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsV3Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventsV3OperationCompleted Is Nothing) Then
                Me.retrieveEventsV3OperationCompleted = AddressOf Me.OnretrieveEventsV3OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsV3", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventsV3OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsV3OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsV3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsV3Completed(Me, New retrieveEventsV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventString( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("retrieveEventString", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventStringAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventStringOperationCompleted Is Nothing) Then
                Me.retrieveEventStringOperationCompleted = AddressOf Me.OnretrieveEventStringOperationCompleted
            End If
            Me.InvokeAsync("retrieveEventString", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventStringCompleted(Me, New retrieveEventStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventStringV2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventStringV2( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("retrieveEventStringV2", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringV2Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventStringV2Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringV2Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventStringV2OperationCompleted Is Nothing) Then
                Me.retrieveEventStringV2OperationCompleted = AddressOf Me.OnretrieveEventStringV2OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventStringV2", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventStringV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventStringV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventStringV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventStringV2Completed(Me, New retrieveEventStringV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventStringV3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventStringV3( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("retrieveEventStringV3", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringV3Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventStringV3Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventStringV3Async( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventStringV3OperationCompleted Is Nothing) Then
                Me.retrieveEventStringV3OperationCompleted = AddressOf Me.OnretrieveEventStringV3OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventStringV3", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventStringV3OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventStringV3OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventStringV3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventStringV3Completed(Me, New retrieveEventStringV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByID(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsByID", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDAsync(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDOperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDOperationCompleted = AddressOf Me.OnretrieveEventsByIDOperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByID", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDCompleted(Me, New retrieveEventsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByIDV2(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsByIDV2", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV2Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDV2Async(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV2Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDV2OperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDV2OperationCompleted = AddressOf Me.OnretrieveEventsByIDV2OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByIDV2", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDV2Completed(Me, New retrieveEventsByIDV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByIDV3(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsByIDV3", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV3Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDV3Async(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV3Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDV3OperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDV3OperationCompleted = AddressOf Me.OnretrieveEventsByIDV3OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByIDV3", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDV3OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDV3OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDV3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDV3Completed(Me, New retrieveEventsByIDV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV4", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByIDV4(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsByIDV4", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV4Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDV4Async(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV4Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDV4OperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDV4OperationCompleted = AddressOf Me.OnretrieveEventsByIDV4OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByIDV4", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDV4OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDV4OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDV4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDV4Completed(Me, New retrieveEventsByIDV4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV5", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByIDV5(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As String
            Dim results() As Object = Me.Invoke("retrieveEventsByIDV5", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV5Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDV5Async(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV5Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDV5OperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDV5OperationCompleted = AddressOf Me.OnretrieveEventsByIDV5OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByIDV5", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDV5OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDV5OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDV5CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDV5Completed(Me, New retrieveEventsByIDV5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV6", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsByIDV6(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsByIDV6", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV6Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer)
            Me.retrieveEventsByIDV6Async(UserName, Password, PhysicalID, Events, Clave, NumReg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsByIDV6Async(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Events As String, ByVal Clave As Long, ByVal NumReg As Integer, ByVal userState As Object)
            If (Me.retrieveEventsByIDV6OperationCompleted Is Nothing) Then
                Me.retrieveEventsByIDV6OperationCompleted = AddressOf Me.OnretrieveEventsByIDV6OperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsByIDV6", New Object() {UserName, Password, PhysicalID, Events, Clave, NumReg}, Me.retrieveEventsByIDV6OperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsByIDV6OperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsByIDV6CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsByIDV6Completed(Me, New retrieveEventsByIDV6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLastEvent(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getLastEvent", New Object() {UserName, Password, PhysicalID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLastEventAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String)
            Me.getLastEventAsync(UserName, Password, PhysicalID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLastEventAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal userState As Object)
            If (Me.getLastEventOperationCompleted Is Nothing) Then
                Me.getLastEventOperationCompleted = AddressOf Me.OngetLastEventOperationCompleted
            End If
            Me.InvokeAsync("getLastEvent", New Object() {UserName, Password, PhysicalID}, Me.getLastEventOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLastEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLastEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLastEventCompleted(Me, New getLastEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEventWithImei", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLastEventWithImei(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getLastEventWithImei", New Object() {UserName, Password, PhysicalID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLastEventWithImeiAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String)
            Me.getLastEventWithImeiAsync(UserName, Password, PhysicalID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLastEventWithImeiAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal userState As Object)
            If (Me.getLastEventWithImeiOperationCompleted Is Nothing) Then
                Me.getLastEventWithImeiOperationCompleted = AddressOf Me.OngetLastEventWithImeiOperationCompleted
            End If
            Me.InvokeAsync("getLastEventWithImei", New Object() {UserName, Password, PhysicalID}, Me.getLastEventWithImeiOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLastEventWithImeiOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLastEventWithImeiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLastEventWithImeiCompleted(Me, New getLastEventWithImeiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEventString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLastEventString(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String) As String
            Dim results() As Object = Me.Invoke("getLastEventString", New Object() {UserName, Password, PhysicalID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLastEventStringAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String)
            Me.getLastEventStringAsync(UserName, Password, PhysicalID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLastEventStringAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal userState As Object)
            If (Me.getLastEventStringOperationCompleted Is Nothing) Then
                Me.getLastEventStringOperationCompleted = AddressOf Me.OngetLastEventStringOperationCompleted
            End If
            Me.InvokeAsync("getLastEventString", New Object() {UserName, Password, PhysicalID}, Me.getLastEventStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLastEventStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLastEventStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLastEventStringCompleted(Me, New getLastEventStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsInOut", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsInOut( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("retrieveEventsInOut", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsInOutAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventsInOutAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsInOutAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventsInOutOperationCompleted Is Nothing) Then
                Me.retrieveEventsInOutOperationCompleted = AddressOf Me.OnretrieveEventsInOutOperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsInOut", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventsInOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsInOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsInOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsInOutCompleted(Me, New retrieveEventsInOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsInOutString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function retrieveEventsInOutString( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("retrieveEventsInOutString", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsInOutStringAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer)
            Me.retrieveEventsInOutStringAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub retrieveEventsInOutStringAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal Events As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.retrieveEventsInOutStringOperationCompleted Is Nothing) Then
                Me.retrieveEventsInOutStringOperationCompleted = AddressOf Me.OnretrieveEventsInOutStringOperationCompleted
            End If
            Me.InvokeAsync("retrieveEventsInOutString", New Object() {UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.retrieveEventsInOutStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnretrieveEventsInOutStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.retrieveEventsInOutStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent retrieveEventsInOutStringCompleted(Me, New retrieveEventsInOutStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getItineraryData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItineraryData(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("getItineraryData", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItineraryDataAsync(ByVal UserName As String, ByVal Password As String)
            Me.getItineraryDataAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItineraryDataAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.getItineraryDataOperationCompleted Is Nothing) Then
                Me.getItineraryDataOperationCompleted = AddressOf Me.OngetItineraryDataOperationCompleted
            End If
            Me.InvokeAsync("getItineraryData", New Object() {UserName, Password}, Me.getItineraryDataOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItineraryDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItineraryDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItineraryDataCompleted(Me, New getItineraryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SNA", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SNA(ByVal UserName As String, ByVal Password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SNA", New Object() {UserName, Password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SNAAsync(ByVal UserName As String, ByVal Password As String)
            Me.SNAAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SNAAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.SNAOperationCompleted Is Nothing) Then
                Me.SNAOperationCompleted = AddressOf Me.OnSNAOperationCompleted
            End If
            Me.InvokeAsync("SNA", New Object() {UserName, Password}, Me.SNAOperationCompleted, userState)
        End Sub
        
        Private Sub OnSNAOperationCompleted(ByVal arg As Object)
            If (Not (Me.SNACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SNACompleted(Me, New SNACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RKH", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RKH(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("RKH", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RKHAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer)
            Me.RKHAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RKHAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.RKHOperationCompleted Is Nothing) Then
                Me.RKHOperationCompleted = AddressOf Me.OnRKHOperationCompleted
            End If
            Me.InvokeAsync("RKH", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.RKHOperationCompleted, userState)
        End Sub
        
        Private Sub OnRKHOperationCompleted(ByVal arg As Object)
            If (Not (Me.RKHCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RKHCompleted(Me, New RKHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVirtualPointByUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getVirtualPointByUser(ByVal UserName As String, ByVal Password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVirtualPointByUser", New Object() {UserName, Password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVirtualPointByUserAsync(ByVal UserName As String, ByVal Password As String)
            Me.getVirtualPointByUserAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVirtualPointByUserAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.getVirtualPointByUserOperationCompleted Is Nothing) Then
                Me.getVirtualPointByUserOperationCompleted = AddressOf Me.OngetVirtualPointByUserOperationCompleted
            End If
            Me.InvokeAsync("getVirtualPointByUser", New Object() {UserName, Password}, Me.getVirtualPointByUserOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVirtualPointByUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVirtualPointByUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVirtualPointByUserCompleted(Me, New getVirtualPointByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVirtualPointEvents", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getVirtualPointEvents(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVirtualPointEvents", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVirtualPointEventsAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer)
            Me.getVirtualPointEventsAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVirtualPointEventsAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.getVirtualPointEventsOperationCompleted Is Nothing) Then
                Me.getVirtualPointEventsOperationCompleted = AddressOf Me.OngetVirtualPointEventsOperationCompleted
            End If
            Me.InvokeAsync("getVirtualPointEvents", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.getVirtualPointEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVirtualPointEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVirtualPointEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVirtualPointEventsCompleted(Me, New getVirtualPointEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setMDTMessage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setMDTMessage(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Message As String, ByVal MessageCode As String) As Boolean
            Dim results() As Object = Me.Invoke("setMDTMessage", New Object() {UserName, Password, PhysicalID, Message, MessageCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setMDTMessageAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Message As String, ByVal MessageCode As String)
            Me.setMDTMessageAsync(UserName, Password, PhysicalID, Message, MessageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setMDTMessageAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal Message As String, ByVal MessageCode As String, ByVal userState As Object)
            If (Me.setMDTMessageOperationCompleted Is Nothing) Then
                Me.setMDTMessageOperationCompleted = AddressOf Me.OnsetMDTMessageOperationCompleted
            End If
            Me.InvokeAsync("setMDTMessage", New Object() {UserName, Password, PhysicalID, Message, MessageCode}, Me.setMDTMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetMDTMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.setMDTMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setMDTMessageCompleted(Me, New setMDTMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SIR_InformePosicionesGeograficas", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SIR_InformePosicionesGeograficas(ByVal UserName As String, ByVal Password As String, ByVal TipoTrama As Integer, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer) As String
            Dim results() As Object = Me.Invoke("SIR_InformePosicionesGeograficas", New Object() {UserName, Password, TipoTrama, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SIR_InformePosicionesGeograficasAsync(ByVal UserName As String, ByVal Password As String, ByVal TipoTrama As Integer, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer)
            Me.SIR_InformePosicionesGeograficasAsync(UserName, Password, TipoTrama, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SIR_InformePosicionesGeograficasAsync(ByVal UserName As String, ByVal Password As String, ByVal TipoTrama As Integer, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal userState As Object)
            If (Me.SIR_InformePosicionesGeograficasOperationCompleted Is Nothing) Then
                Me.SIR_InformePosicionesGeograficasOperationCompleted = AddressOf Me.OnSIR_InformePosicionesGeograficasOperationCompleted
            End If
            Me.InvokeAsync("SIR_InformePosicionesGeograficas", New Object() {UserName, Password, TipoTrama, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute}, Me.SIR_InformePosicionesGeograficasOperationCompleted, userState)
        End Sub
        
        Private Sub OnSIR_InformePosicionesGeograficasOperationCompleted(ByVal arg As Object)
            If (Not (Me.SIR_InformePosicionesGeograficasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SIR_InformePosicionesGeograficasCompleted(Me, New SIR_InformePosicionesGeograficasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKilometer(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetKilometer", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKilometerAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer)
            Me.GetKilometerAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKilometerAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.GetKilometerOperationCompleted Is Nothing) Then
                Me.GetKilometerOperationCompleted = AddressOf Me.OnGetKilometerOperationCompleted
            End If
            Me.InvokeAsync("GetKilometer", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.GetKilometerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKilometerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKilometerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKilometerCompleted(Me, New GetKilometerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKilometerString(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer) As String
            Dim results() As Object = Me.Invoke("GetKilometerString", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKilometerStringAsync(ByVal UserName As String, ByVal Password As String, ByVal PhysicalID As String, ByVal InitialYear As Integer, ByVal InitialMonth As Integer, ByVal InitialDay As Integer, ByVal InitialHour As Integer, ByVal InitialMinute As Integer, ByVal InitialSecs As Integer, ByVal FinalYear As Integer, ByVal FinalMonth As Integer, ByVal FinalDay As Integer, ByVal FinalHour As Integer, ByVal FinalMinute As Integer, ByVal FinalSecs As Integer)
            Me.GetKilometerStringAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKilometerStringAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal PhysicalID As String,  _
                    ByVal InitialYear As Integer,  _
                    ByVal InitialMonth As Integer,  _
                    ByVal InitialDay As Integer,  _
                    ByVal InitialHour As Integer,  _
                    ByVal InitialMinute As Integer,  _
                    ByVal InitialSecs As Integer,  _
                    ByVal FinalYear As Integer,  _
                    ByVal FinalMonth As Integer,  _
                    ByVal FinalDay As Integer,  _
                    ByVal FinalHour As Integer,  _
                    ByVal FinalMinute As Integer,  _
                    ByVal FinalSecs As Integer,  _
                    ByVal userState As Object)
            If (Me.GetKilometerStringOperationCompleted Is Nothing) Then
                Me.GetKilometerStringOperationCompleted = AddressOf Me.OnGetKilometerStringOperationCompleted
            End If
            Me.InvokeAsync("GetKilometerString", New Object() {UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs}, Me.GetKilometerStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKilometerStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKilometerStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKilometerStringCompleted(Me, New GetKilometerStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerCurrentDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKilometerCurrentDate(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetKilometerCurrentDate", New Object() {UserName, Password, Filter, Value})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKilometerCurrentDateAsync(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String)
            Me.GetKilometerCurrentDateAsync(UserName, Password, Filter, Value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKilometerCurrentDateAsync(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String, ByVal userState As Object)
            If (Me.GetKilometerCurrentDateOperationCompleted Is Nothing) Then
                Me.GetKilometerCurrentDateOperationCompleted = AddressOf Me.OnGetKilometerCurrentDateOperationCompleted
            End If
            Me.InvokeAsync("GetKilometerCurrentDate", New Object() {UserName, Password, Filter, Value}, Me.GetKilometerCurrentDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKilometerCurrentDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKilometerCurrentDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKilometerCurrentDateCompleted(Me, New GetKilometerCurrentDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerCurrentDateString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKilometerCurrentDateString(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String) As String
            Dim results() As Object = Me.Invoke("GetKilometerCurrentDateString", New Object() {UserName, Password, Filter, Value})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKilometerCurrentDateStringAsync(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String)
            Me.GetKilometerCurrentDateStringAsync(UserName, Password, Filter, Value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKilometerCurrentDateStringAsync(ByVal UserName As String, ByVal Password As String, ByVal Filter As String, ByVal Value As String, ByVal userState As Object)
            If (Me.GetKilometerCurrentDateStringOperationCompleted Is Nothing) Then
                Me.GetKilometerCurrentDateStringOperationCompleted = AddressOf Me.OnGetKilometerCurrentDateStringOperationCompleted
            End If
            Me.InvokeAsync("GetKilometerCurrentDateString", New Object() {UserName, Password, Filter, Value}, Me.GetKilometerCurrentDateStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKilometerCurrentDateStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKilometerCurrentDateStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKilometerCurrentDateStringCompleted(Me, New GetKilometerCurrentDateStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionesByUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRegionesByUser(ByVal UserName As String, ByVal Password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRegionesByUser", New Object() {UserName, Password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRegionesByUserAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetRegionesByUserAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRegionesByUserAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetRegionesByUserOperationCompleted Is Nothing) Then
                Me.GetRegionesByUserOperationCompleted = AddressOf Me.OnGetRegionesByUserOperationCompleted
            End If
            Me.InvokeAsync("GetRegionesByUser", New Object() {UserName, Password}, Me.GetRegionesByUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRegionesByUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRegionesByUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRegionesByUserCompleted(Me, New GetRegionesByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionesByUserString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRegionesByUserString(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetRegionesByUserString", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRegionesByUserStringAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetRegionesByUserStringAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRegionesByUserStringAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetRegionesByUserStringOperationCompleted Is Nothing) Then
                Me.GetRegionesByUserStringOperationCompleted = AddressOf Me.OnGetRegionesByUserStringOperationCompleted
            End If
            Me.InvokeAsync("GetRegionesByUserString", New Object() {UserName, Password}, Me.GetRegionesByUserStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRegionesByUserStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRegionesByUserStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRegionesByUserStringCompleted(Me, New GetRegionesByUserStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVehiclesByRegiones", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVehiclesByRegiones(ByVal UserName As String, ByVal Password As String, ByVal Region As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetVehiclesByRegiones", New Object() {UserName, Password, Region})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVehiclesByRegionesAsync(ByVal UserName As String, ByVal Password As String, ByVal Region As String)
            Me.GetVehiclesByRegionesAsync(UserName, Password, Region, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVehiclesByRegionesAsync(ByVal UserName As String, ByVal Password As String, ByVal Region As String, ByVal userState As Object)
            If (Me.GetVehiclesByRegionesOperationCompleted Is Nothing) Then
                Me.GetVehiclesByRegionesOperationCompleted = AddressOf Me.OnGetVehiclesByRegionesOperationCompleted
            End If
            Me.InvokeAsync("GetVehiclesByRegiones", New Object() {UserName, Password, Region}, Me.GetVehiclesByRegionesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVehiclesByRegionesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVehiclesByRegionesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVehiclesByRegionesCompleted(Me, New GetVehiclesByRegionesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVehiclesByRegionesString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVehiclesByRegionesString(ByVal UserName As String, ByVal Password As String, ByVal Region As String) As String
            Dim results() As Object = Me.Invoke("GetVehiclesByRegionesString", New Object() {UserName, Password, Region})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVehiclesByRegionesStringAsync(ByVal UserName As String, ByVal Password As String, ByVal Region As String)
            Me.GetVehiclesByRegionesStringAsync(UserName, Password, Region, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVehiclesByRegionesStringAsync(ByVal UserName As String, ByVal Password As String, ByVal Region As String, ByVal userState As Object)
            If (Me.GetVehiclesByRegionesStringOperationCompleted Is Nothing) Then
                Me.GetVehiclesByRegionesStringOperationCompleted = AddressOf Me.OnGetVehiclesByRegionesStringOperationCompleted
            End If
            Me.InvokeAsync("GetVehiclesByRegionesString", New Object() {UserName, Password, Region}, Me.GetVehiclesByRegionesStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVehiclesByRegionesStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVehiclesByRegionesStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVehiclesByRegionesStringCompleted(Me, New GetVehiclesByRegionesStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerPointByUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerPointByUser(ByVal UserName As String, ByVal Password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerPointByUser", New Object() {UserName, Password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerPointByUserAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetCustomerPointByUserAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerPointByUserAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetCustomerPointByUserOperationCompleted Is Nothing) Then
                Me.GetCustomerPointByUserOperationCompleted = AddressOf Me.OnGetCustomerPointByUserOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerPointByUser", New Object() {UserName, Password}, Me.GetCustomerPointByUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerPointByUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerPointByUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerPointByUserCompleted(Me, New GetCustomerPointByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerPointByUserString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerPointByUserString(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetCustomerPointByUserString", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerPointByUserStringAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetCustomerPointByUserStringAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerPointByUserStringAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetCustomerPointByUserStringOperationCompleted Is Nothing) Then
                Me.GetCustomerPointByUserStringOperationCompleted = AddressOf Me.OnGetCustomerPointByUserStringOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerPointByUserString", New Object() {UserName, Password}, Me.GetCustomerPointByUserStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerPointByUserStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerPointByUserStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerPointByUserStringCompleted(Me, New GetCustomerPointByUserStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CrearRegionDinamicas", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CrearRegionDinamicas(ByVal userName As String, ByVal password As String, ByVal nombre As String, ByVal codigoCliente As String, ByVal longitud As Decimal, ByVal latitud As Decimal, ByVal tamano As Single, ByVal descripcion As String, ByVal direccion As String, ByVal tipoRestriccion As Integer, ByVal cantidadDias As Integer, ByVal placas As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CrearRegionDinamicas", New Object() {userName, password, nombre, codigoCliente, longitud, latitud, tamano, descripcion, direccion, tipoRestriccion, cantidadDias, placas})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CrearRegionDinamicasAsync(ByVal userName As String, ByVal password As String, ByVal nombre As String, ByVal codigoCliente As String, ByVal longitud As Decimal, ByVal latitud As Decimal, ByVal tamano As Single, ByVal descripcion As String, ByVal direccion As String, ByVal tipoRestriccion As Integer, ByVal cantidadDias As Integer, ByVal placas As String)
            Me.CrearRegionDinamicasAsync(userName, password, nombre, codigoCliente, longitud, latitud, tamano, descripcion, direccion, tipoRestriccion, cantidadDias, placas, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CrearRegionDinamicasAsync(ByVal userName As String, ByVal password As String, ByVal nombre As String, ByVal codigoCliente As String, ByVal longitud As Decimal, ByVal latitud As Decimal, ByVal tamano As Single, ByVal descripcion As String, ByVal direccion As String, ByVal tipoRestriccion As Integer, ByVal cantidadDias As Integer, ByVal placas As String, ByVal userState As Object)
            If (Me.CrearRegionDinamicasOperationCompleted Is Nothing) Then
                Me.CrearRegionDinamicasOperationCompleted = AddressOf Me.OnCrearRegionDinamicasOperationCompleted
            End If
            Me.InvokeAsync("CrearRegionDinamicas", New Object() {userName, password, nombre, codigoCliente, longitud, latitud, tamano, descripcion, direccion, tipoRestriccion, cantidadDias, placas}, Me.CrearRegionDinamicasOperationCompleted, userState)
        End Sub
        
        Private Sub OnCrearRegionDinamicasOperationCompleted(ByVal arg As Object)
            If (Not (Me.CrearRegionDinamicasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CrearRegionDinamicasCompleted(Me, New CrearRegionDinamicasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarms", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlarms(ByVal UserName As String, ByVal Password As String, ByVal AttentionType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAlarms", New Object() {UserName, Password, AttentionType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmsAsync(ByVal UserName As String, ByVal Password As String, ByVal AttentionType As String)
            Me.GetAlarmsAsync(UserName, Password, AttentionType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmsAsync(ByVal UserName As String, ByVal Password As String, ByVal AttentionType As String, ByVal userState As Object)
            If (Me.GetAlarmsOperationCompleted Is Nothing) Then
                Me.GetAlarmsOperationCompleted = AddressOf Me.OnGetAlarmsOperationCompleted
            End If
            Me.InvokeAsync("GetAlarms", New Object() {UserName, Password, AttentionType}, Me.GetAlarmsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmsCompleted(Me, New GetAlarmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsCompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsV2CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsV3CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsV3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsV3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventStringCompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventStringV2CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventStringV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventStringV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventStringV3CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventStringV3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventStringV3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDCompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDV2CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDV3CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDV3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDV3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDV4CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDV4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDV4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDV5CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDV5CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDV5CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsByIDV6CompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsByIDV6CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsByIDV6CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getLastEventCompletedEventHandler(ByVal sender As Object, ByVal e As getLastEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLastEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getLastEventWithImeiCompletedEventHandler(ByVal sender As Object, ByVal e As getLastEventWithImeiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLastEventWithImeiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getLastEventStringCompletedEventHandler(ByVal sender As Object, ByVal e As getLastEventStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLastEventStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsInOutCompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsInOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsInOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub retrieveEventsInOutStringCompletedEventHandler(ByVal sender As Object, ByVal e As retrieveEventsInOutStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class retrieveEventsInOutStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getItineraryDataCompletedEventHandler(ByVal sender As Object, ByVal e As getItineraryDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getItineraryDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SNACompletedEventHandler(ByVal sender As Object, ByVal e As SNACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SNACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RKHCompletedEventHandler(ByVal sender As Object, ByVal e As RKHCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RKHCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getVirtualPointByUserCompletedEventHandler(ByVal sender As Object, ByVal e As getVirtualPointByUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVirtualPointByUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getVirtualPointEventsCompletedEventHandler(ByVal sender As Object, ByVal e As getVirtualPointEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVirtualPointEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub setMDTMessageCompletedEventHandler(ByVal sender As Object, ByVal e As setMDTMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setMDTMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SIR_InformePosicionesGeograficasCompletedEventHandler(ByVal sender As Object, ByVal e As SIR_InformePosicionesGeograficasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SIR_InformePosicionesGeograficasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetKilometerCompletedEventHandler(ByVal sender As Object, ByVal e As GetKilometerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKilometerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetKilometerStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetKilometerStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKilometerStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetKilometerCurrentDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetKilometerCurrentDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKilometerCurrentDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetKilometerCurrentDateStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetKilometerCurrentDateStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKilometerCurrentDateStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRegionesByUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetRegionesByUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRegionesByUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRegionesByUserStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetRegionesByUserStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRegionesByUserStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVehiclesByRegionesCompletedEventHandler(ByVal sender As Object, ByVal e As GetVehiclesByRegionesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVehiclesByRegionesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVehiclesByRegionesStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetVehiclesByRegionesStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVehiclesByRegionesStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerPointByUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerPointByUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerPointByUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerPointByUserStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerPointByUserStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerPointByUserStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CrearRegionDinamicasCompletedEventHandler(ByVal sender As Object, ByVal e As CrearRegionDinamicasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CrearRegionDinamicasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAlarmsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
